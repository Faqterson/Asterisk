[general]
#include "func_odbc_custom.conf"

; dsn          An alias for "writehandle."
; readhandle   A comma-separated list of DSNs (from res_odbc.conf) to use when
;              executing the readsql statement.  Each DSN is tried, in
;              succession, until the statement succeeds.  You may specify up to
;              5 DSNs per function class.  If not specified, it will default to
;              the value of "writehandle" or "dsn," if specified.
; writehandle  A comma-separated list of DSNs (from res_odbc.conf) to use when
;              executing the writesql statement.  The same rules apply as to
;              readhandle.
; readsql      The statement to execute when reading from the function class.
; writesql     The statement to execute when writing to the function class.
; insertsql    The statement to execute when writing to the function class
;              succeeds, but initially indicates that 0 rows were affected.
; prefix       Normally, all function classes are prefixed with "ODBC" to keep
;              them uniquely named.  You may choose to change this prefix, which
;              may be useful to segregate a collection of certain function
;              classes from others.
; escapecommas This option may be used to turn off the default behavior of
;              escaping commas which occur within a field.  If commas are
;              escaped (the default behavior), then fields containing commas
;              will be treated as a single value when assigning to ARRAY() or
;              HASH().  If commas are not escaped, then values will be separated
;              at the comma within fields.  Please note that turning this option
;              off is incompatible with the functionality of HASH().
; synopsis     Appears in the synopsis field for the command
;              'core show function <function name>'
; syntax       Appears in the syntax field for the command
;              'core show function <function name>'
; mode         This option may be set to 'multirow' to allow the function
;              specified to return more than a single row.  However, this
;              changes the way that func_odbc normally works.  Instead of the
;              invocation of the function returning a row, it returns an opaque
;              ID, which may be passed to ODBC_FETCH() to return each row in
;              turn.  ODBC_FETCH_STATUS returns SUCCESS or FAILURE, to indicate
;              whether any results were stored, and you should call ODBC_Finish
;              on the ID to clean up any remaining results when you are done
;              with the query.  Also, the variable ODBCROWS is set initially,
;              which may be used in an iterative fashion to return each row in
;              the result.
;              Please note that multirow queries are isolated to the channel,
;              and rows may not be fetched outside of the channel where the
;              query was initially performed.  Additionally, as the results are
;              associated with a channel, mode=multirow is incompatible with
;              the global space.
; rowlimit     Rowlimit limits the total number of rows which can be stored for
;              that query.  For mode=multirow, otherwise, func_odbc will
;              attempt to store all rows in the resultset, up to the maximum
;              amount of memory.  In normal mode, rowlimit can be set to allow
;              additional rows to be fetched, rather than just the first one.
;              These additional rows can be returned by using the name of the
;              function which was called to retrieve the first row as an
;              argument to ODBC_FETCH().


[DND]
dsn=asterisk
table=ext_features
readsql=SELECT DND FROM ext_features where extension =${ARG1}

[callwaiting]
dsn=asterisk
table=ext_features
readsql=SELECT (CASE WHEN callwaiting = "no" THEN 1 ELSE 0 END) FROM ext_features where extension =${ARG1}

[callforwardawaydst]
dsn=asterisk
table=ext_features
readsql=SELECT callforwardawaydst FROM ext_features where extension =${ARG1}

[callforwardaway]
dsn=asterisk
table=ext_features
readsql=SELECT callforwardaway FROM ext_features where extension =${ARG1}

[callforwardbusydst]
dsn=asterisk
table=ext_features
readsql=SELECT callforwardbusydst FROM ext_features where extension =${ARG1}

[callforwardbusy]
dsn=asterisk
table=ext_features
readsql=SELECT callforwardbusy FROM ext_features where extension =${ARG1}

[callforwarddst]
dsn=asterisk
table=ext_features
readsql=SELECT callforwarddst FROM ext_features where extension =${ARG1}

[callforward]
dsn=asterisk
table=ext_features
readsql=SELECT callforward FROM ext_features where extension =${ARG1}

[requirepin]
dsn=asterisk
table=ext_features
readsql=SELECT requirepin FROM ext_features where extension =${ARG1}

[barringinternational]
dsn=asterisk
table=ext_features
readsql=SELECT international FROM ext_features where extension =${ARG1}

[barringnational]
dsn=asterisk
table=ext_features
readsql=SELECT national FROM ext_features where extension =${ARG1}

[barringcellular]
dsn=asterisk
table=ext_features
readsql=SELECT cellular FROM ext_features where extension =${ARG1}

[barringinternal]
dsn=asterisk
table=ext_features
readsql=SELECT internal FROM ext_features where extension =${ARG1}

[namebasedonpin]
dsn=asterisk
readsql=SELECT name FROM pin_codes where pin =${ARG1}

[barringinternationalpin]
dsn=asterisk
readsql=SELECT international FROM pin_codes where pin =${ARG1}

[barringnationalpin]
dsn=asterisk
readsql=SELECT national FROM pin_codes where pin =${ARG1}

[barringcellularpin]
dsn=asterisk
readsql=SELECT cellular FROM pin_codes where pin =${ARG1}

[barringinternalpin]
dsn=asterisk
readsql=SELECT internal FROM pin_codes where pin =${ARG1}

[updatednd]
dsn=asterisk
table=ext_features
writesql=UPDATE ext_features SET dnd='${VAL1}' where extension = '${ARG1}'

[updatecallforward]
dsn=asterisk
table=ext_features
writesql=UPDATE ext_features SET callforwarddst='${VAL1}' where extension = '${ARG1}'

[updatecallforwardbusy]
dsn=asterisk
table=ext_features
writesql=UPDATE ext_features SET callforwardbusydst='${VAL1}' where extension = '${ARG1}'

[hashchannel]
dsn=asterisk
table=cdr
writesql=UPDATE cdr SET channel='${VAL1}' where channel = '${ARG1}'

[hashdst]
dsn=asterisk
table=cdr
writesql=UPDATE cdr SET dst='${VAL1}' where channel = '${ARG1}'

[hashlast]
dsn=asterisk
table=cdr
writesql=UPDATE cdr SET lastdata='${VAL1}' where channel = '${ARG1}'

[createunique]
dsn=asterisk
table=uniqueident
readsql=INSERT INTO uniqueident (callid)  VALUES ('${VAL1}')

[createuniqueid]
dsn=asterisk
table=uniqueident
readsql=SELECT COUNT(*) from uniqueident

[timeconditions]
dsn=asterisk
mode=multirow
readsql=SELECT time,wday,mday,month FROM timeconditions WHERE context='${SQL_ESC(${ARG1})}' AND department = '${SQL_ESC(${ARG2})}'

[inboundroute]
dsn=asterisk
readsql=SELECT cidname,department,destination,data FROM inbound WHERE didnumber = '${SQL_ESC(${ARG1})}'

[get-exten]
dsn=asterisk
readsql=SELECT name FROM sip WHERE uniqueid = '${SQL_ESC(${ARG1})}'

[get-queue]
dsn=asterisk
readsql=SELECT name FROM queues WHERE name = '${SQL_ESC(${ARG1})}'

[get-forwarders]
dsn=asterisk
readsql=SELECT number,department FROM forwarders WHERE uniqueid = '${SQL_ESC(${ARG1})}'

[get-voicemail]
dsn=asterisk
readsql=SELECT mailbox FROM voicemail WHERE uniqueid = '${SQL_ESC(${ARG1})}'

[officehoursroute]
dsn=asterisk
readsql=SELECT announcement,officehours.destination,officehours.data FROM officehours LEFT JOIN inbound ON (inbound.uniqueid = didid) WHERE didnumber = '${SQL_ESC(${ARG1})}'

[afterhoursroute]
dsn=asterisk
readsql=SELECT announcement,afterhours.destination,afterhours.data FROM afterhours LEFT JOIN inbound ON (inbound.uniqueid = didid) WHERE didnumber = '${SQL_ESC(${ARG1})}'

[holidayroute]
dsn=asterisk
readsql=SELECT announcement,holiday.destination,holiday.data FROM holiday LEFT JOIN inbound ON (inbound.uniqueid = didid) WHERE didnumber = '${SQL_ESC(${ARG1})}'

[get-ivr]
dsn=asterisk
readsql=SELECT announcement FROM ivr WHERE uniqueid = '${SQL_ESC(${ARG1})}'

[ivr-entries]
dsn=asterisk
readsql=SELECT destination,data FROM ivr_entries WHERE ivrid = '${SQL_ESC(${ARG1})}' AND entry = '${SQL_ESC(${ARG2})}'

[global]
dsn=asterisk
readsql=SELECT value FROM global WHERE name = '${SQL_ESC(${ARG1})}'

[nightmode]
dsn=asterisk
readsql=SELECT value FROM global WHERE name = '${SQL_ESC(${ARG1})}'

[updatenightmode]
dsn=asterisk
writesql=UPDATE global SET value='${VAL1}' where name = 'NIGHTMODE'

[department-nightmode]
dsn=asterisk
readsql=SELECT value FROM dep_trunk WHERE name = '${SQL_ESC(${ARG1})}' AND department = '${SQL_ESC(${ARG2})}'

[department-updatenightmode]
dsn=asterisk
writesql=UPDATE dep_trunk SET value='${VAL1}' where name = '${SQL_ESC(${ARG1})}' AND department = '${SQL_ESC(${VAL2})}'

[queueinfo]
dsn=asterisk
readsql=SELECT queueforward,musiconhold,queuetimeout FROM queues_features where queue_name = '${SQL_ESC(${ARG1})}'

[queueforward]
dsn=asterisk
readsql=SELECT destination,data FROM queues_features WHERE queue_name = '${SQL_ESC(${ARG1})}'

[outcallerid]
dsn=asterisk
readsql=SELECT outcallerid FROM ext_features WHERE extension = '${SQL_ESC(${ARG1})}'

[set_outcallerid]
dsn=asterisk
writesql=UPDATE ext_features SET outcallerid = '${VAL1}' WHERE extension = '${SQL_ESC(${ARG1})}'

[department]
dsn=asterisk
readsql=SELECT department FROM departments WHERE sip = '${SQL_ESC(${ARG1})}'

[dep_trunk]
dsn=asterisk
readsql=SELECT value FROM dep_trunk WHERE department = '${SQL_ESC(${ARG1})}' AND name = 'TRUNK'

[dep_failtrunk]
dsn=asterisk
readsql=SELECT value FROM dep_trunk WHERE department = '${SQL_ESC(${ARG1})}' AND name = 'FAILTRUNK'

[speeddial]
dsn=asterisk
readsql=SELECT number from speeddials where speeddial = '${SQL_ESC(${ARG1})}'

[forwardqueue]
dsn=asterisk
writesql=UPDATE queues_features SET queueforward = '${VAL1}', queuetimeout = '${VAL2}', destination = '${VAL3}', data = '${VAL4}' where queue_name = '${SQL_ESC(${ARG1})}'

[get-queue_out]
dsn=asterisk
readsql=SELECT queue_out from ext_features where extension = '${SQL_ESC(${ARG1})}'

[set-queue_out]
dsn=asterisk
table=ext_features
writesql=UPDATE ext_features SET queue_out='${VAL1}' where extension = '${ARG1}'

[survey]
dsn=asterisk
table=survey
writesql=INSERT INTO surveys (name,clid,src,uniqueid,answers,agent) VALUES('${SQL_ESC(${ARG1})}','${SQL_ESC(${VAL1})}','${SQL_ESC(${VAL2})}','${SQL_ESC(${VAL3})}','${SQL_ESC(${VAL4})}','${SQL_ESC(${VAL5})}')

[cloudcall]
dsn=asterisk
readsql=SELECT name,department FROM cloudcall WHERE number='${SQL_ESC(${ARG1})}'

[defaultcli]
dsn=asterisk
readsql=SELECT value FROM global WHERE name = '${SQL_ESC(${ARG1})}'

[department-defaultcli]
dsn=asterisk
readsql=SELECT value FROM dep_trunk WHERE name = '${SQL_ESC(${ARG1})}' AND department = '${SQL_ESC(${ARG2})}'

[get-agent-pass]
dsn=asterisk
readsql=SELECT password FROM agents WHERE agent = '${SQL_ESC(${ARG1})}'

[check-agent-channel]
dsn=asterisk
readsql=SELECT channel FROM agents WHERE agent = '${SQL_ESC(${ARG1})}'

[set-agent-channel]
dsn=asterisk
writesql=UPDATE agents SET channel = '${SQL_ESC(${VAL2})}' WHERE agent = '${SQL_ESC(${VAL1})}'

[get-agent]
dsn=asterisk
readsql=SELECT agent FROM agents WHERE channel = '${SQL_ESC(${ARG1})}'
